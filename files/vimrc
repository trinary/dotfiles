set nocompatible
filetype off

call pathogen#infect()

filetype plugin indent on

set t_Co=256
set number
syntax on

set hidden
let mapleader=","
set history=1000

set updatetime=0

runtime macros/matchit.vim

set wildmenu
set wildmode=list:longest

set title
set scrolloff=3
set clipboard=unnamed

" PowerLine
let g:Powerline_symbols = 'fancy'
" Slime
let g:slime_target = "tmux"
" vimclojure
let vimclojure#HighlightBuiltins=1
let vimclojure#ParenRainbow=1
let vimclojure#WantNailgun = 1
let vimclojure#NailgunClient = "/usr/local/bin/ng"
autocmd BufWritePre *.clj call vimclojure#EvalFile()
autocmd InsertLeave *.clj :wa | call vimclojure#EvalFile()

let vimclojure#HighlightBuiltins=1
let vimclojure#HighlightContrib=1
let vimclojure#DynamicHighlighting=1
let vimclojure#ParenRainbow=1
let vimclojure#WantNailgun = 1
let vimclojure#NailgunClient = "/usr/local/bin/ng"

" ctrlp
let g:ctrlp_open_new_file = 't'
let g:ctrlp_open_multi = '1t'

" Set encoding
set encoding=utf-8

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set list listchars=tab:\ \ ,trail:·
set shiftround

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

:nnoremap <CR> :nohlsearch<cr>

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*


set fillchars=vert:│
" Status bar
set laststatus=2

set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
" set relativenumber
set noundofile
set wrap
set directory=~/.vim/tmp/
set backupdir=~/.vim/tmp
set shortmess=atI

let g:solarized_termcolors=256
colorscheme Tomorrow-Night

" don't clobber buffer if used in term
set t_ti= t_te=

" Make Arrow Keys Useful Again
map <down> <ESC>:bn<RETURN>
map <right> <ESC>:TagbarToggle<RETURN>
map <left> <ESC>:GundoToggle<RETURN>
map <up> <ESC>:bp<RETURN>

imap <C-h> <C-w> h
imap <C-j> <C-w> j
imap <C-k> <C-w> k
imap <C-l> <C-w> l

" Removes trailing spaces
function TrimWhiteSpace()
  %s/\s*$//
  ''
:endfunction

au BufNewFile,BufRead *.less set filetype=css
au! BufRead,BufNewFile *.json set filetype=json


set list listchars=tab:\ \ ,trail:·,extends:>,precedes:<
"autocmd FileWritePre * :call TrimWhiteSpace()
"autocmd FileAppendPre * :call TrimWhiteSpace()
"autocmd FilterWritePre * :call TrimWhiteSpace()
"autocmd BufWritePre * :call TrimWhiteSpace()

map <F2> :call TrimWhiteSpace()<CR>
map! <F2> :call TrimWhiteSpace()<CR>

set background=dark
